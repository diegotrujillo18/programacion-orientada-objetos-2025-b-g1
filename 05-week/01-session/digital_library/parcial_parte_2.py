# -*- coding: utf-8 -*-
"""PARCIAL PARTE 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o0jPHLqGeEOja24JONvXn_N9dNHkIHey
"""

from abc import ABC, abstractmethod
from datetime import datetime, timedelta
# AUTORIA: JUAN DIEGO TRUJILLO NARVAEZ
# PROGRAMA: INGENIERIA MECATRONICA
# CLASE: PROGRAMACION ORIENTADA A OBJETOS

# CLASES BASE

class Item(ABC):
    def __init__(self, titulo, stock):
        self._titulo = titulo
        self._stock = stock if stock >= 0 else 0

    @property
    def titulo(self):
        return self._titulo

    @property
    def stock(self):
        return self._stock

    @stock.setter
    def stock(self, value):
        if value < 0:
            raise ValueError("El stock no puede ser negativo")
        self._stock = value

    @abstractmethod
    def dias_prestamo(self):
        pass

    @abstractmethod
    def multa_dia(self):
        pass

    def __str__(self):
        return f"{self.__class__.__name__}: {self._titulo} (Stock: {self._stock})"


class Libro(Item):
    def dias_prestamo(self):
        return 14

    def multa_dia(self):
        return 300


class Revista(Item):
    def dias_prestamo(self):
        return 7

    def multa_dia(self):
        return 200


class Usuario:
    def __init__(self, nombre, documento):
        self._nombre = nombre
        self._documento = documento

    @property
    def nombre(self):
        return self._nombre

    @property
    def documento(self):
        return self._documento

    def __str__(self):
        return f"{self._nombre} (Doc: {self._documento})"


class Prestamo:
    def __init__(self, usuario, item: Item, fecha=None):
        self.usuario = usuario
        self.item = item
        self.fecha = fecha if fecha else datetime.now()
        self.fecha_limite = self.fecha + timedelta(days=item.dias_prestamo())
        self.devuelto = False

    def devolver(self):
        self.devuelto = True
        retraso = (datetime.now() - self.fecha_limite).days
        return max(0, retraso) * self.item.multa_dia()

    def vencido(self):
        return not self.devuelto and datetime.now() > self.fecha_limite

    def __str__(self):
        estado = "Devuelto" if self.devuelto else "Activo"
        return f"{self.item.titulo} | {estado} | Vence: {self.fecha_limite.date()}"


# SERVICIOS

class Biblioteca:
    def __init__(self):
        self.usuarios = []
        self.items = []
        self.prestamos = []

        # Usuarios predeterminados
        ana = Usuario("Ana Mendez", "1001")
        diego = Usuario("Diego Trujillo", "1002")
        self.usuarios.extend([ana, diego])

        # Materiales predeterminados
        libro = Libro("Stay with me", 1)
        revista = Revista("Semana", 1)
        libro_extra = Libro("Cien años de soledad", 1)  # Nuevo libro con stock = 1
        self.items.extend([libro, revista, libro_extra])

        # Préstamo de Ana (hace 60 días -> vencido)
        prestamo_ana = Prestamo(ana, libro, fecha=datetime.now() - timedelta(days=60))
        libro.stock -= 1
        self.prestamos.append(prestamo_ana)

        # Préstamo de Diego (hace 2 días -> aún activo)
        prestamo_diego = Prestamo(diego, revista, fecha=datetime.now() - timedelta(days=2))
        revista.stock -= 1
        self.prestamos.append(prestamo_diego)

    # Usuarios
    def agregar_usuario(self, nombre, documento):
        if any(u.documento == documento for u in self.usuarios):
            print("Documento duplicado. ✖")
            return
        self.usuarios.append(Usuario(nombre, documento))
        print("Su usuario creado. ✔")

    def listar_usuarios(self):
        if not self.usuarios:
            print("(sin usuarios)")
        for u in self.usuarios:
            print(u)

    # Materiales
    def agregar_item(self, tipo, titulo, stock):
        if any(i.titulo.lower() == titulo.lower() for i in self.items):
            print("Ya existe un material con ese título.✖")
            return
        if tipo.lower() == "libro":
            self.items.append(Libro(titulo, stock))
        elif tipo.lower() == "revista":
            self.items.append(Revista(titulo, stock))
        else:
            print("Tipo inválido. ✖")
            return
        print("El material fue agregado. ✔")

    def listar_items(self):
        if not self.items:
            print("(sin materiales)")
        for i in self.items:
            print(i)

    # Préstamos
    def prestar(self, doc, titulo):
        usuario = next((u for u in self.usuarios if u.documento == doc), None)
        item = next((i for i in self.items if i.titulo.lower() == titulo.lower()), None)
        if not usuario or not item:
            print("El usuario o material no encontrado. ✖")
            return
        if any(p.usuario.documento == doc and p.item.titulo.lower() == titulo.lower() and not p.devuelto for p in self.prestamos):
            print("El usuario ya tiene prestado ese material. ✖")
            return
        if item.stock <= 0:
            print("Sin stock disponible. ✖")
            return
        prestamo = Prestamo(usuario, item)
        self.prestamos.append(prestamo)
        item.stock -= 1
        print(f"Préstamo registrado ✔. Vence el {prestamo.fecha_limite.date()}.")

    def devolver(self, doc, titulo):
        for p in self.prestamos:
            if p.usuario.documento == doc and p.item.titulo.lower() == titulo.lower() and not p.devuelto:
                multa = p.devolver()
                p.item.stock += 1
                print(f" Devuelto ✔. Multa: ${multa}")
                return
        print("Préstamo no encontrado. ✖")

    # Reportes
    def reporte_activos(self):
        activos = [p for p in self.prestamos if not p.devuelto]
        if not activos:
            print("(sin préstamos activos)")
        for p in activos:
            print(f"- {p.usuario.nombre} tiene '{p.item.titulo}' (vence {p.fecha_limite.date()})")

    def reporte_vencidos(self):
        vencidos = [p for p in self.prestamos if p.vencido()]
        if not vencidos:
            print("(sin préstamos vencidos)")
        for p in vencidos:
            atraso = (datetime.now() - p.fecha_limite).days
            print(f"- {p.usuario.nombre} con '{p.item.titulo}' | Atraso: {atraso} días | Multa estimada: ${atraso * p.item.multa_dia()}")


# CLI

def menu():
    print("""
================= Biblioteca Digital =======================
1. Crear usuario
2. Listar usuarios
3. Crear material (Libro/Revista)
4. Listar materiales
5. Prestar material
6. Devolver material
7. Reporte: Préstamos activos
8. Reporte: Préstamos vencidos
0. Salir
============================================================
""")


def run():
    biblio = Biblioteca()
    while True:
        menu()
        op = input("Seleccione una opción: ").strip()
        if op == "1":
            biblio.agregar_usuario(input("Nombre: "), input("Documento: "))
        elif op == "2":
            biblio.listar_usuarios()
        elif op == "3":
            biblio.agregar_item(input("Tipo (libro/revista): "), input("Título: "), int(input("Stock: ")))
        elif op == "4":
            biblio.listar_items()
        elif op == "5":
            biblio.prestar(input("Documento: "), input("Título: "))
        elif op == "6":
            biblio.devolver(input("Documento: "), input("Título: "))
        elif op == "7":
            biblio.reporte_activos()
        elif op == "8":
            biblio.reporte_vencidos()
        elif op == "0":
            print("¡Hasta luego!")
            break
        else:
            print("Opción inválida.")


if __name__ == "__main__":
    run()